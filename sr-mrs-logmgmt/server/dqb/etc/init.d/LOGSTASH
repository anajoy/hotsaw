#!/bin/sh
# Init script for logstash
# Maintained by Elasticsearch
# Generated by pleaserun.
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          logstash
# Required-Start:    $remote_fs $syslog $elasticsearch
# Required-Stop:     $remote_fs $syslog $elasticsearch
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: 
# Description:        Starts Logstash as a daemon.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
#export PATH

# setup search path for custom java
PATH=/opt/java-oracle/jre/bin:$PATH
export PATH
JAVACMD=/opt/java-oracle/jre/bin/java
export JAVACMD

if [ `id -u` -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

name=DQBL

##custom SR
export SINCEDB_DIR=/export/home/deploy/lts

LS_USER=logstash
LS_GROUP=logstash
LS_HOME=/var/lib/logstash
LS_HEAP_SIZE="1g"
LS_JAVA_OPTS="-Djava.io.tmpdir=${LS_HOME}"
LS_LOG_DIR=/var/log/logstash
LS_LOG_FILE="${LS_LOG_DIR}/$name.log"
LS_CONF_DIR=/etc/logstash/conf.d
LS_OPEN_FILES=16384
LS_NICE=19
LS_FILTER_WORKERS="16"
LS_OPTS=""

[ -r /etc/default/$name ] && . /etc/default/$name
[ -r /etc/sysconfig/$name ] && . /etc/sysconfig/$name

pidfile="/var/run/$LS_USER/$name.pid"
program=/opt/logstash/bin/logstash
args="agent -f ${LS_CONF_DIR} -w ${LS_FILTER_WORKERS} -l ${LS_LOG_FILE} ${LS_OPTS}"

start() {

  JAVA_OPTS=${LS_JAVA_OPTS}
  HOME=${LS_HOME}
  export PATH HOME JAVA_OPTS LS_HEAP_SIZE LS_JAVA_OPTS LS_USE_GC_LOGGING

  # set ulimit as (root, presumably) first, before we drop privileges
  ulimit -n ${LS_OPEN_FILES}
  umask 002

  # Run the program!
  nice -n ${LS_NICE} chroot --userspec $LS_USER:$LS_GROUP / sh -c "
    cd $LS_HOME
    ulimit -n ${LS_OPEN_FILES}
    exec \"$program\" $args
  " > "${LS_LOG_DIR}/$name.stdout" 2> "${LS_LOG_DIR}/$name.err" &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  echo "$name started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=`cat "$pidfile"`
    echo "Terminating $name (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      echo "Waiting $name (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      echo "$name stop failed; still running."
    else
      echo "$name stopped."
    fi
  else
    echo "$name already stopped."
  fi

}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      return 0 # process by this pid is running
    elif [ `pgrep -f logstash/runner.rb` ] ; then
      pid=`pgrep -f logstash/runner.rb`
      return 1 # program is running with another pid
    else
      unset pid
      return 2 # program is dead but pid file exists
    fi
  elif [ `pgrep -f logstash/runner.rb` ] ; then
    pid=`pgrep -f logstash/runner.rb`
    return 3 # program is running without a pidfile
  else
    unset pid
    return 4 # program is not running
  fi
}

force_stop() {
  code_fs=4 # intitialise for the case it's already stopped
  status
  code=$?
  #echo "STATUS1 $code"
  if [ $code -eq 0 ] ; then
    stop
    sleep 3
    status && kill -KILL `cat "$pidfile"`
    code_fs=$?
    #echo "KILL1 $code_fs"
    sleep 3
    status
    code=$?
    #echo "STATUS2 $code"
  fi
  if [ $code -le 1 -o $code -eq 3 ] ; then
    echo "$name stop failed; still running."
  elif [ $code_fs -eq 2 ] ; then 
    echo "$name stopped with SIGTERM."
  elif [ $code_fs -eq 0 -a $code -eq 2 ] ; then
    echo "$name stopped with SIGKILL."
  else 
    echo "$name already stopped."
  fi
  unset code_fs
}


case "$1" in
  start)
    status
    code=$?
    if [ $code -le 1 -o $code -eq 3 ] ; then
      # no start is required, as logstash is already running. Exit
      echo "$name already running! Exting."
      exit $code
    fi
    # check, if elasticsearch is already running
    code=`pgrep -c -f org.elasticsearch.bootstrap.Elasticsearch`
    if [ $code -eq 0 ]; then
      echo "$name is already running or elasticsearch is not running! Start elasticsearch before launching logstash."
    else
      start
      code=$?
    fi
    exit $code
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status) 
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "$name is running"
    elif [ $code -eq 1 ] ; then
      echo "$name is running, but pidfile does not match. Please use force-stop to stop this process!"
    elif [ $code -eq 3 ] ; then
      echo "$name is running, but no pidfile does exist. Please use force-stop to stop this process!"
    else
      echo "$name is stopped."
    fi
    exit $code
    ;;
  restart) 
    
    stop && start 
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?